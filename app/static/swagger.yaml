#app/static/swagger.yaml

swagger: '2.0'
info:
  title: "AutoShop API"
  description: "API to manage an Auto Shop"
  version: "1.0.0"
host: "my-auto-shop.onrender.com"
schemes:
  - "https"
consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header

paths:

# mechanic paths

  /mechanics/login:
    post:
      tags:
        - Mechanics
      summary: Mechanic Login (generate token)
      description: Post login credentials (email & password); returns a JWT token if valid.
      parameters:
        - name: body
          in: body
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            example:
              email: "user@example.com"
              password: "hunter2"
      responses:
        200:
          description: Successful login
          schema:
            type: object
            properties:
              token:
                type: string
            example:
              token: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  /mechanics:
    post:
      tags:
        - Mechanics
      summary: Create a Mechanic
      description: Add a new mechanic record to the database.
      parameters:
        - name: body
          in: body
          description: Mechanic payload
          required: true
          schema:
            $ref: '#/definitions/MechanicPayload'
      responses:
        201:
          description: Mechanic created successfully
          schema:
            $ref: '#/definitions/MechanicResponse'
          examples:
            application/json:
              email: "johndoe@email.com"
              id: 1
              name: "John"
              salary: 1000000
              tickets: []

    get:
      tags:
        - Mechanics
      summary: Get Mechanics
      description: Retrieve all mechanics.
      responses:
        200:
          description: List of mechanics
          schema:
            $ref: '#/definitions/MechanicListResponse'
          examples:
            application/json:
              - id: 1
                name: "John"
                email: "johndoe@email.com"
                salary: 1000000
                tickets: []

    put: #request type
      tags:
        - Mechanics
      summary: Update a Mechanic (Token Required)
      description: Update an existing mechanic, requires that mechanic to be logged in.
      security:
        - bearerAuth: []
      parameters: 
        - in: body
          name: body
          description: Information used to update mechanic.
          required: true
          schema:  
            $ref: '#/definitions/MechanicPayload'
      responses: 
        200: 
          description: Successful Update
          schema: 
            $ref: '#/definitions/MechanicResponse'
          examples:
            application/json:
              email: "johndoe@email.com"
              id: 1
              name: "John"
              password: "123btr"
              salary: 1000000
              tickets: []

    delete: #request type
      tags:
        - Mechanics
      summary: Delete a Mechanic (Token Required)
      description: Delete an existing mechanic, requires that mechanic to be logged in.
      security:
        - bearerAuth: []
      responses: 
        200: 
          description: Successfully deleted mechanic
          schema: 
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "successfully deleted mechanic 1"
        401:
          description: Missing or invalid token
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "invalid token"

  /mechanics/popular:
    get:
      tags:
        - Mechanics
      summary: Retrieve list of popular mechanics
      description: Returns all mechanics sorted by number of service tickets (highest first)
      responses:
        200:
          description: Successful retrieval of mechanics sorted by popularity
          schema:
            $ref: '#/definitions/MechanicListResponse'
          examples:
            application/json:
              - id: 1
                name: "John Doe"
                email: "johndoe@email.com"
                password: "1234"
                salary: 1000000
                tickets: [1,5,8]

# customer paths

  /customers/login:
    post:
      tags:
        - Customers
      summary: Customer Login
      description: Authenticate customer and return token.
      parameters:
        - name: body
          in: body
          description: Login credentials
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
              password:
                type: string
            examples:
              email: "cust@example.com"
              password: "password"
      responses:
        200:
          description: Successful customer login
          schema:
            $ref: '#/definitions/CustomerToken'

  /customers/{id}:
    get:
      tags:
        - Customers
      summary: Get Customer by ID
      parameters:
        - name: id
          in: path
          description: Numeric customer ID
          required: true
          type: integer
      responses:
        200:
          description: Customer data
          schema:
            $ref: '#/definitions/Customer'
         
  /customers/search:
    get:
      tags:
        - Customers
      summary: Search Customers by Email
      parameters:
        - name: email
          in: query
          description: Email address to filter by
          required: false
          type: string
      responses:
        200:
          description: Matching customers
          schema:
            type: array
            items:
              $ref: '#/definitions/Customer'

  /customers:
    get:
      tags:
        - Customers
      summary: Retrieve all Customers
      description: Endpoint to return all customers
      responses:
        201:
          description: Successful Retrieval
          schema: 
            $ref: '#/definitions/CustomerListResponse'
          examples:
            application/json:
              email: "johndoe@email.com"
              id: 1
              name: "John"
              password: "123btr"
              phone: "111-111-1111"
    
    post:
      tags:
        - Customers
      summary: Create a Customer
      description: Send a JSON payload with customer information to create a new customer in the database
      parameters:
        - in: body
          name: body
          description: Information to create customer
          required: true
          schema:
            $ref: '#/definitions/CustomerPayload'
      responses:
        201:
          description: Successful creation
          schema:
            $ref: '#/definitions/CustomerResponse'
          examples:
            application/json:
              email: "johndoe@email.com"
              id: 1
              name: "John"
              password: "12345"
              phone: "111-111-1111"

    put:
      tags:
        - Customers
      summary: Update a Customer (token required)
      description: Update an existing customer; requires a valid bearer token.
      security:
        - bearerAuth: []
      parameters:
        - name: body
          in: body
          description: Information to update customer
          required: true
          schema:
            $ref: '#/definitions/CustomerPayload'
      responses:
        200:
          description: Successful Update
          schema:
            $ref: '#/definitions/CustomerResponse'
          examples:
            application/json:
              email: "johndoe@email.com"
              id: 1
              name: "John"
              password: "123btr"

    delete:
      tags:
        - Customers
      summary: Delete a customer (token required)
      description: Delete a customer from the database, requires customer to be logged in
      security:
        - bearerAuth: []
      responses: 
        200: 
          description: Successfully deleted customer
          schema: 
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "successfully deleted customer 1"
        401:
          description: Missing or invalid token
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "invalid token"


# service ticket paths

  /service-tickets:
    post:
      tags:
        - Service Tickets
      summary: Create a Service Ticket
      description: Send a JSON payload with ticket data and Mechanic ID's to create a new service ticket and associate mechanics.
      parameters:
        - in: body
          name: body
          description: Service ticket data
          required: True
          schema: 
            $ref: '#/definitions/ServiceTicketPayload'
      responses:
        200:
          description: Successful creation of service ticket
          schema:
            $ref: '#/definitions/ServiceTicketResponse'
          examples:
            application/json:
              id: 1
              VIN: "1HGCM82633A004352"
              service_date: "2025-05-14"
              service_desc: "Oil change"
              customer_id: 1
              mechanics: [1,3]

    get:
      tags:
        - Service Tickets
      summary: Retrieve all Service Tickets
      description: Returns a list of all service tickets in the system
      responses:
        200:
          description: Successful retrieval of service tickets
          schema:
              $ref: '#/definitions/ServieTicketListResponse'
          examples:
            application/json:
              - id: 1
                VIN: "1HGCM82633A004352"
                service_date: "2025-05-14"
                service_desc: "Oil change"
                customer_id: 1
                mechanics: [1,3]
                ticket_parts:
                  - part_id: 1
                    quantity: 2

  /service-tickets/{ticket_id}/edit:
    put:
      tags:
        - Service Tickets
      summary: Update a Service Ticket
      description: Add or remove mechanics on an existing service ticket by providing lists of mechanic IDs to add or remove.
      parameters:
        - in: path
          name: ticket_id
          required: true
          type: integer
          description: ID of the service ticket to update
        - in: body
          name: body
          required: true
          description: Payload containing mechanic IDs to add or remove
          schema:
            $ref: '#/definitions/ServiceTicketEditPayload'
      responses:
        200:
          description: Successful update of service ticket
          schema:
            $ref: '#/definitions/ServiceTicketResponse'
          examples:
            application/json:
              id: 1
              VIN: "1HGCM82633A004352"
              service_date: "2025-05-14"
              service_desc: "Oil change"
              customer_id: 1
              mechanics: [1, 2, 3]
              ticket_parts: []

  /service-tickets/{ticket_id}/parts:
    post:
      tags:
        - ServiceTickets
      summary: Add Part to Service Ticket
      parameters:
        - name: ticket_id
          in: path
          description: ID of the service ticket
          required: true
          type: string
        - name: body
          in: body
          description: Part details to add
          required: true
          schema:
            $ref: '#/definitions/PartPayload'
      responses:
        201:
          description: Part added successfully
          schema:
            $ref: '#/definitions/PartResponse'

  /service-tickets/{ticket_id}:
    delete:
      tags:
        - Service Tickets
      summary: Delete a Service Ticket
      description: Delete a service ticket by its ID.
      parameters:
        - in: path
          name: ticket_id
          required: true
          type: integer
          description: ID of the service ticket to delete
      responses:
        200:
          description: Successfully deleted service ticket
          schema: 
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Service ticket 5 deleted"
        404:
          description: Servie ticket not found
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "service ticket not found"


# inventory paths

  /inventory:
    post:
      tags:
        - Inventory
      summary: Crate an Inventory item
      description: Send a JSON payload with name and price to add a new item to the inventory.
      parameters:
        - in: body
          name: body
          description: Inventory item data
          required: true
          schema:
            $ref: '#/definitions/InventoryPayload'
      responses:
        201:
          description: Successfully created inventory item
          schema:
            $ref: '#/definitions/InventoryResponse'
          examples:
            application/json:
              id: 1
              name: "Engine Filter"
              price: 10.99

    get:
      tags:
        - Inventory
      summary: Retrieve all inventory items
      description: Returns a list of all inventory items in the system
      responses:
        200:
          description: Successful retrieval of inventory items
          schema:
            $ref: '#/definitions/InventoryListResponse'
          examples:
            application/json:
              - id: 1
                name: "Engine Filter"
                price: 10.99

  /inventory/{item_id}:
    put:
      tags:
        - Inventory
      summary: Update an inventory item
      description: Update the name and/or price of an existing inventory item.
      parameters:
        - in: path
          name: item_id
          required: true
          type: integer
          description: ID of inventory item to be updated
        - in: body
          name: body
          required: true
          description: Inventory fields to updata (name and/or price)
          schema:
            $ref: '#/definitions/InventoryPayload'
      responses:
        200:
          description: Inventory item updated successfully
          schema:
            $ref: '#/definitions/InventoryResponse'
          examples:
            application/json:
              id: 1
              name: "Engine Filter"
              price: 10.99

    delete:
      tags:
        - Inventory
      summary: Delete inventory item
      description: Delete an inventory item by its ID.
      parameters:
        - in: path
          name: item_id
          required: true
          type: integer
          description: ID of inventory item to be deleted
      responses:
        200:
          description: Successfully deleted inventory item
          schema:
            type: object
            properties:
              message:
                type: string
          examples:
            application/json:
              message: "Successfully deleted inventory item 1"
        
        

definitions: 

  MechanicPayload:
    type: object
    properties:
      name: 
        type: string
      email:
        type: string
      password:
        type: string
      salary: 
        type: integer

  MechanicResponse:
    type: object
    properties:
      email:
        type: string
      id:
        type: integer
      name: 
        type: string
      password:
        type: string
      salary:
        type: integer
      tickets:
        type: array
        items:
          type: integer

  MechanicListResponse:
    type: array
    items:
      type: object
      properties:
        email:
          type: string
        id: 
          type: integer
        name:
          type: string
        password:
          type: string
        salary:
          type: integer
        tickets:
          type: array
          items:
            type: integer

  CustomerPayload:
    type: object
    properties:
      name:
        type: string
      email:
        type: string
      phone:
        type: string
      password:
        type: string

  CustomerResponse:
    type: object
    properties:
      email: 
        type: string
      id: 
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string

  CustomerListResponse:
    type: array
    items: 
      type: object
      properties:
        email:
          type: string
        id:
          type: integer
        name:
          type: string
        password:
          type: string
        phone:
          type: string

  ServiceTicketPayload:
    type: object
    required:
      - VIN
      - service_date
      - service_desc
      - customer_id
      - mechanic_ids
    properties:
      VIN:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
      customer_id:
        type: integer
      mechanic_ids:
        type: array
        items:
          type: integer

  ServiceTicketResponse:
    type: object
    properties:
      id: 
        type: integer
      VIN:
        type: string
      service_date:
        type: string
        format: date
      service_desc:
        type: string
      customer_id:
        type: integer
      mechanics:
        type: array
        items:
          type: integer
      ticket_parts:
        type: array
        items:
          type: object
          properties:
            part_id:
              type: integer
            quantity:
              type: integer

  ServiceTicketListResponse:
    type: array
    items:
      $ref: '#/definitions/ServiceTicketResponse'

  ServiceTicketEditPayload:
    type: object
    required:
      - add_ids
      - remove_ids
    properties:
      add_ids:
        type: array
        items:
          type: integer
      remove_ids:
        type: array
        items:
          type: integer

  ServiceTicketPartPayload:
    type: object
    required:
      - part_id
      - quantity
    properties:
      part_id: 
        type: integer
      quantity:
        type: integer

  InventoryPayload:
    type: object
    required:
      - name
      - price
    properties:
      name:
        type: string
      price:
        type: number
        format: float

  InventoryResponse:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      price: 
        type: number
        format: float

  InventoryListResponse:
    type: array
    items:
      $ref: '#definitions/InventoryResponse'